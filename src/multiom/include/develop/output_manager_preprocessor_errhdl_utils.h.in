#ifndef OUTPUT_MANAGER_PREPROCESSOR_ERRHDL_UTILS_H
#define OUTPUT_MANAGER_PREPROCESSOR_ERRHDL_UTILS_H

!! 'CRITICAL      (ERROR)  ', & ! critical
!! 'HIGH          (ERROR)  ', & ! high
!! 'MEDIUM        (ERROR)  ', & ! medium
!! 'LOW           (WARNING)', & ! low
!! 'ENHACEMENT    (ERROR)  ', & ! enhacement (not implemented)
!! 'INFORMATIONAL (LOG)    ', & ! informational
!! 'DEVELOPMENT   (LOG)    ' ]  ! development (emabled only in develop mode)


#define PP_ERROR_HANDLER \
666 CONTINUE;

#define PP_DEBUG_USE_VARS \
USE :: OM_CORE_MOD, ONLY: JPEB_K, OM_ABORT, OM_CREATE_ERRMSG

#define PP_DEBUG_DECL_VARS \
INTEGER(KIND=JPEB_K) :: ERRIDX, LINE

#define PP_DEBUG_DEVELOP_COND_THROW( COND, ERR_CODE ) \
IF ( COND ) THEN; \
LINE = __LINE__; \
ERRIDX = ERR_CODE; \
GOTO 666; \
ENDIF

#define PP_DEBUG_DEVELOP_THROW( ERR_CODE ) \
LINE   = __LINE__; \
ERRIDX = ERR_CODE; \
GOTO 666;


#define PP_DEBUG_CRITICAL_COND_THROW( COND, ERR_CODE ) \
IF ( COND ) THEN; \
LINE = __LINE__; \
ERRIDX = ERR_CODE; \
GOTO 666; \
ENDIF

#define PP_DEBUG_CRITICAL_THROW( ERR_CODE ) \
LINE = __LINE__; \
ERRIDX = ERR_CODE; \
GOTO 666;

#define PP_DEBUG_HIGH_THROW( ERR_CODE ) \
LINE = __LINE__; \
ERRIDX = ERR_CODE; \
GOTO 666;

#define PP_DEBUG_CREATE_ERROR_MSG( STR, MSG ) \
CALL OM_CREATE_ERRMSG( STR, PP_FILE_NAME, PP_SECTION_TYPE, \
PP_SECTION_NAME, PP_PROCEDURE_TYPE, PP_PROCEDURE_NAME, \
LINE, ERRIDX, MSG  )

#define PP_DEBUG_CREATE_ERROR_MSG_GRIB( STR, MSG, GRIBID, GRIBMSG ) \
CALL OM_CREATE_ERRMSG( STR, PP_FILE_NAME, PP_SECTION_TYPE, \
PP_SECTION_NAME, PP_PROCEDURE_TYPE, PP_PROCEDURE_NAME, \
LINE, ERRIDX, MSG, GRIBID, GRIBMSG )

#define PP_DEBUG_ABORT( STR ) \
CALL OM_ABORT( STR )

#endif